// <auto-generated />
using System;
using Fleet.Assets;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fleet.Api.Migrations
{
    [DbContext(typeof(AssetDbContext))]
    [Migration("20220425155539_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Fleet.Assets.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssetCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IconPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentAssetCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentAssetCategoryId");

                    b.ToTable("AssetCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Vehicle"
                        });
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetFleet", b =>
                {
                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FleetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("AssetId", "FleetId");

                    b.HasIndex("FleetId");

                    b.ToTable("AssetFleets");
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetLogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetLogItems");
                });

            modelBuilder.Entity("Fleet.Assets.Models.Fleet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("Fleet.Assets.Models.Asset", b =>
                {
                    b.HasOne("Fleet.Assets.Models.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId");

                    b.Navigation("AssetCategory");
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetCategory", b =>
                {
                    b.HasOne("Fleet.Assets.Models.AssetCategory", "ParentAssetCategory")
                        .WithMany("SubAssetCategories")
                        .HasForeignKey("ParentAssetCategoryId");

                    b.Navigation("ParentAssetCategory");
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetFleet", b =>
                {
                    b.HasOne("Fleet.Assets.Models.Asset", "Asset")
                        .WithMany("AssetFleets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fleet.Assets.Models.Fleet", "Fleet")
                        .WithMany("AssetFleets")
                        .HasForeignKey("FleetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Fleet");
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetLogItem", b =>
                {
                    b.HasOne("Fleet.Assets.Models.Asset", "Asset")
                        .WithMany("AssetLogItems")
                        .HasForeignKey("AssetId");

                    b.OwnsOne("Fleet.Common.Location", "Location", b1 =>
                        {
                            b1.Property<int>("AssetLogItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("TEXT");

                            b1.HasKey("AssetLogItemId");

                            b1.ToTable("AssetLogItems");

                            b1.WithOwner()
                                .HasForeignKey("AssetLogItemId");
                        });

                    b.Navigation("Asset");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Fleet.Assets.Models.Asset", b =>
                {
                    b.Navigation("AssetFleets");

                    b.Navigation("AssetLogItems");
                });

            modelBuilder.Entity("Fleet.Assets.Models.AssetCategory", b =>
                {
                    b.Navigation("SubAssetCategories");
                });

            modelBuilder.Entity("Fleet.Assets.Models.Fleet", b =>
                {
                    b.Navigation("AssetFleets");
                });
#pragma warning restore 612, 618
        }
    }
}
